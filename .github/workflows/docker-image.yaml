name: Test.AI CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  # CI - Testes e verificação
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]  # Testando em múltiplas versões do Python

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
    
    # Configuração do Python
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    # Instalar dependências
    - name: Instalar dependências
      run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel
          pip install --force-reinstall -r requirements.txt
          pip install test-ai-leds
          pip install pytest-cov
    
     # Rodar testes com pytest
    - name: Rodar testes com pytest
      run: |
        PYTHONPATH=$PWD pytest src/tests/unit --cov=src
      shell: bash

  # CD - Construção da imagem Docker e deploy
  cd:
    runs-on: ubuntu-latest
    needs: ci  # Certificar-se de que o job 'ci' seja concluído antes
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      
      # Construir a imagem Docker
      - name: Verificar versão do Docker
        run: docker --version

      - name: Construir a imagem Docker
        run: docker build -t my-python-app:latest .

      # Login no Docker Hub
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Push da imagem Docker para o Docker Hub
      - name: Push da imagem Docker
        run: |
          docker tag my-python-app:latest ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest
